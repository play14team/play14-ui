/* tslint:disable */
/* eslint-disable */
/**
 * #play14 api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@play14.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  EventListResponse,
  EventLocalizationRequest,
  EventLocalizationResponse,
  EventRequest,
  EventResponse,
} from "../models";
import {
  EventListResponseFromJSON,
  EventListResponseToJSON,
  EventLocalizationRequestFromJSON,
  EventLocalizationRequestToJSON,
  EventLocalizationResponseFromJSON,
  EventLocalizationResponseToJSON,
  EventRequestFromJSON,
  EventRequestToJSON,
  EventResponseFromJSON,
  EventResponseToJSON,
} from "../models";

export interface DeleteEventsIdRequest {
  id: number;
}

export interface GetEventsRequest {
  sort?: string;
  paginationWithCount?: boolean;
  paginationPage?: number;
  paginationPageSize?: number;
  paginationStart?: number;
  paginationLimit?: number;
  fields?: string;
  populate?: string;
  filters?: object;
  locale?: string;
}

export interface GetEventsIdRequest {
  id: number;
}

export interface PostEventsRequest {
  eventRequest: EventRequest;
}

export interface PostEventsIdLocalizationsRequest {
  id: number;
  eventLocalizationRequest: EventLocalizationRequest;
}

export interface PutEventsIdRequest {
  id: number;
  eventRequest: EventRequest;
}

/**
 *
 */
export class EventApi extends runtime.BaseAPI {
  /**
   */
  async deleteEventsIdRaw(
    requestParameters: DeleteEventsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteEventsId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async deleteEventsId(
    requestParameters: DeleteEventsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.deleteEventsIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getEventsRaw(
    requestParameters: GetEventsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EventListResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.paginationWithCount !== undefined) {
      queryParameters["pagination[withCount]"] =
        requestParameters.paginationWithCount;
    }

    if (requestParameters.paginationPage !== undefined) {
      queryParameters["pagination[page]"] = requestParameters.paginationPage;
    }

    if (requestParameters.paginationPageSize !== undefined) {
      queryParameters["pagination[pageSize]"] =
        requestParameters.paginationPageSize;
    }

    if (requestParameters.paginationStart !== undefined) {
      queryParameters["pagination[start]"] = requestParameters.paginationStart;
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters["pagination[limit]"] = requestParameters.paginationLimit;
    }

    if (requestParameters.fields !== undefined) {
      queryParameters["fields"] = requestParameters.fields;
    }

    if (requestParameters.populate !== undefined) {
      queryParameters["populate"] = requestParameters.populate;
    }

    if (requestParameters.filters !== undefined) {
      queryParameters["filters"] = requestParameters.filters;
    }

    if (requestParameters.locale !== undefined) {
      queryParameters["locale"] = requestParameters.locale;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventListResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getEvents(
    requestParameters: GetEventsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EventListResponse> {
    const response = await this.getEventsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getEventsIdRaw(
    requestParameters: GetEventsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EventResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getEventsId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getEventsId(
    requestParameters: GetEventsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EventResponse> {
    const response = await this.getEventsIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async postEventsRaw(
    requestParameters: PostEventsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EventResponse>> {
    if (
      requestParameters.eventRequest === null ||
      requestParameters.eventRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "eventRequest",
        "Required parameter requestParameters.eventRequest was null or undefined when calling postEvents."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: EventRequestToJSON(requestParameters.eventRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postEvents(
    requestParameters: PostEventsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EventResponse> {
    const response = await this.postEventsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postEventsIdLocalizationsRaw(
    requestParameters: PostEventsIdLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EventLocalizationResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postEventsIdLocalizations."
      );
    }

    if (
      requestParameters.eventLocalizationRequest === null ||
      requestParameters.eventLocalizationRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "eventLocalizationRequest",
        "Required parameter requestParameters.eventLocalizationRequest was null or undefined when calling postEventsIdLocalizations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events/{id}/localizations`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: EventLocalizationRequestToJSON(
          requestParameters.eventLocalizationRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventLocalizationResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postEventsIdLocalizations(
    requestParameters: PostEventsIdLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EventLocalizationResponse> {
    const response = await this.postEventsIdLocalizationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async putEventsIdRaw(
    requestParameters: PutEventsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EventResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling putEventsId."
      );
    }

    if (
      requestParameters.eventRequest === null ||
      requestParameters.eventRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "eventRequest",
        "Required parameter requestParameters.eventRequest was null or undefined when calling putEventsId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: EventRequestToJSON(requestParameters.eventRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async putEventsId(
    requestParameters: PutEventsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EventResponse> {
    const response = await this.putEventsIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
