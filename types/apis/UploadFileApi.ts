/* tslint:disable */
/* eslint-disable */
/**
 * #play14 api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@play14.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { UploadFileListResponse, UploadFileResponse } from "../models";
import {
  UploadFileListResponseFromJSON,
  UploadFileListResponseToJSON,
  UploadFileResponseFromJSON,
  UploadFileResponseToJSON,
} from "../models";

export interface DeleteUploadFilesIdRequest {
  id: number;
}

export interface GetUploadFilesRequest {
  sort?: string;
  paginationWithCount?: boolean;
  paginationPage?: number;
  paginationPageSize?: number;
  paginationStart?: number;
  paginationLimit?: number;
  fields?: string;
  populate?: string;
  filters?: object;
  locale?: string;
}

export interface GetUploadFilesIdRequest {
  id: number;
}

/**
 *
 */
export class UploadFileApi extends runtime.BaseAPI {
  /**
   */
  async deleteUploadFilesIdRaw(
    requestParameters: DeleteUploadFilesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteUploadFilesId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/upload/files/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async deleteUploadFilesId(
    requestParameters: DeleteUploadFilesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.deleteUploadFilesIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getUploadFilesRaw(
    requestParameters: GetUploadFilesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadFileListResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.paginationWithCount !== undefined) {
      queryParameters["pagination[withCount]"] =
        requestParameters.paginationWithCount;
    }

    if (requestParameters.paginationPage !== undefined) {
      queryParameters["pagination[page]"] = requestParameters.paginationPage;
    }

    if (requestParameters.paginationPageSize !== undefined) {
      queryParameters["pagination[pageSize]"] =
        requestParameters.paginationPageSize;
    }

    if (requestParameters.paginationStart !== undefined) {
      queryParameters["pagination[start]"] = requestParameters.paginationStart;
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters["pagination[limit]"] = requestParameters.paginationLimit;
    }

    if (requestParameters.fields !== undefined) {
      queryParameters["fields"] = requestParameters.fields;
    }

    if (requestParameters.populate !== undefined) {
      queryParameters["populate"] = requestParameters.populate;
    }

    if (requestParameters.filters !== undefined) {
      queryParameters["filters"] = requestParameters.filters;
    }

    if (requestParameters.locale !== undefined) {
      queryParameters["locale"] = requestParameters.locale;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/upload/files`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UploadFileListResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getUploadFiles(
    requestParameters: GetUploadFilesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadFileListResponse> {
    const response = await this.getUploadFilesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getUploadFilesIdRaw(
    requestParameters: GetUploadFilesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadFileResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getUploadFilesId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/upload/files/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UploadFileResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getUploadFilesId(
    requestParameters: GetUploadFilesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadFileResponse> {
    const response = await this.getUploadFilesIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
