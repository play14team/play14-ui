/* tslint:disable */
/* eslint-disable */
/**
 * #play14 api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@play14.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { VenueListResponse, VenueRequest, VenueResponse } from "../models";
import {
  VenueListResponseFromJSON,
  VenueListResponseToJSON,
  VenueRequestFromJSON,
  VenueRequestToJSON,
  VenueResponseFromJSON,
  VenueResponseToJSON,
} from "../models";

export interface DeleteVenuesIdRequest {
  id: number;
}

export interface GetVenuesRequest {
  sort?: string;
  paginationWithCount?: boolean;
  paginationPage?: number;
  paginationPageSize?: number;
  paginationStart?: number;
  paginationLimit?: number;
  fields?: string;
  populate?: string;
  filters?: object;
  locale?: string;
}

export interface GetVenuesIdRequest {
  id: number;
}

export interface PostVenuesRequest {
  venueRequest: VenueRequest;
}

export interface PutVenuesIdRequest {
  id: number;
  venueRequest: VenueRequest;
}

/**
 *
 */
export class VenueApi extends runtime.BaseAPI {
  /**
   */
  async deleteVenuesIdRaw(
    requestParameters: DeleteVenuesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteVenuesId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/venues/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async deleteVenuesId(
    requestParameters: DeleteVenuesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.deleteVenuesIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getVenuesRaw(
    requestParameters: GetVenuesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<VenueListResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.paginationWithCount !== undefined) {
      queryParameters["pagination[withCount]"] =
        requestParameters.paginationWithCount;
    }

    if (requestParameters.paginationPage !== undefined) {
      queryParameters["pagination[page]"] = requestParameters.paginationPage;
    }

    if (requestParameters.paginationPageSize !== undefined) {
      queryParameters["pagination[pageSize]"] =
        requestParameters.paginationPageSize;
    }

    if (requestParameters.paginationStart !== undefined) {
      queryParameters["pagination[start]"] = requestParameters.paginationStart;
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters["pagination[limit]"] = requestParameters.paginationLimit;
    }

    if (requestParameters.fields !== undefined) {
      queryParameters["fields"] = requestParameters.fields;
    }

    if (requestParameters.populate !== undefined) {
      queryParameters["populate"] = requestParameters.populate;
    }

    if (requestParameters.filters !== undefined) {
      queryParameters["filters"] = requestParameters.filters;
    }

    if (requestParameters.locale !== undefined) {
      queryParameters["locale"] = requestParameters.locale;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/venues`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VenueListResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getVenues(
    requestParameters: GetVenuesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<VenueListResponse> {
    const response = await this.getVenuesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getVenuesIdRaw(
    requestParameters: GetVenuesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<VenueResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getVenuesId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/venues/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VenueResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getVenuesId(
    requestParameters: GetVenuesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<VenueResponse> {
    const response = await this.getVenuesIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async postVenuesRaw(
    requestParameters: PostVenuesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<VenueResponse>> {
    if (
      requestParameters.venueRequest === null ||
      requestParameters.venueRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "venueRequest",
        "Required parameter requestParameters.venueRequest was null or undefined when calling postVenues."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/venues`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: VenueRequestToJSON(requestParameters.venueRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VenueResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postVenues(
    requestParameters: PostVenuesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<VenueResponse> {
    const response = await this.postVenuesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async putVenuesIdRaw(
    requestParameters: PutVenuesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<VenueResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling putVenuesId."
      );
    }

    if (
      requestParameters.venueRequest === null ||
      requestParameters.venueRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "venueRequest",
        "Required parameter requestParameters.venueRequest was null or undefined when calling putVenuesId."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/venues/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: VenueRequestToJSON(requestParameters.venueRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VenueResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async putVenuesId(
    requestParameters: PutVenuesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<VenueResponse> {
    const response = await this.putVenuesIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
