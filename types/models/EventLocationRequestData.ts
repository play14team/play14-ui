/* tslint:disable */
/* eslint-disable */
/**
 * #play14 api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@play14.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { EventLocalizationRequestImagesInner } from "./EventLocalizationRequestImagesInner";
import {
  EventLocalizationRequestImagesInnerFromJSON,
  EventLocalizationRequestImagesInnerFromJSONTyped,
  EventLocalizationRequestImagesInnerToJSON,
} from "./EventLocalizationRequestImagesInner";

/**
 *
 * @export
 * @interface EventLocationRequestData
 */
export interface EventLocationRequestData {
  /**
   *
   * @type {string}
   * @memberof EventLocationRequestData
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EventLocationRequestData
   */
  slug?: string;
  /**
   *
   * @type {string}
   * @memberof EventLocationRequestData
   */
  country?: string;
  /**
   *
   * @type {Array<EventLocalizationRequestImagesInner>}
   * @memberof EventLocationRequestData
   */
  events?: Array<EventLocalizationRequestImagesInner>;
}

/**
 * Check if a given object implements the EventLocationRequestData interface.
 */
export function instanceOfEventLocationRequestData(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "name" in value;

  return isInstance;
}

export function EventLocationRequestDataFromJSON(
  json: any
): EventLocationRequestData {
  return EventLocationRequestDataFromJSONTyped(json, false);
}

export function EventLocationRequestDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): EventLocationRequestData {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json["name"],
    slug: !exists(json, "slug") ? undefined : json["slug"],
    country: !exists(json, "country") ? undefined : json["country"],
    events: !exists(json, "events")
      ? undefined
      : (json["events"] as Array<any>).map(
          EventLocalizationRequestImagesInnerFromJSON
        ),
  };
}

export function EventLocationRequestDataToJSON(
  value?: EventLocationRequestData | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    slug: value.slug,
    country: value.country,
    events:
      value.events === undefined
        ? undefined
        : (value.events as Array<any>).map(
            EventLocalizationRequestImagesInnerToJSON
          ),
  };
}
