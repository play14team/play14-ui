/* tslint:disable */
/* eslint-disable */
/**
 * #play14 api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@play14.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { EventLocalizationRequestImagesInner } from "./EventLocalizationRequestImagesInner";
import {
  EventLocalizationRequestImagesInnerFromJSON,
  EventLocalizationRequestImagesInnerFromJSONTyped,
  EventLocalizationRequestImagesInnerToJSON,
} from "./EventLocalizationRequestImagesInner";

/**
 *
 * @export
 * @interface UploadFolderRequestData
 */
export interface UploadFolderRequestData {
  /**
   *
   * @type {string}
   * @memberof UploadFolderRequestData
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof UploadFolderRequestData
   */
  pathId: number;
  /**
   *
   * @type {EventLocalizationRequestImagesInner}
   * @memberof UploadFolderRequestData
   */
  parent?: EventLocalizationRequestImagesInner;
  /**
   *
   * @type {Array<EventLocalizationRequestImagesInner>}
   * @memberof UploadFolderRequestData
   */
  children?: Array<EventLocalizationRequestImagesInner>;
  /**
   *
   * @type {Array<EventLocalizationRequestImagesInner>}
   * @memberof UploadFolderRequestData
   */
  files?: Array<EventLocalizationRequestImagesInner>;
  /**
   *
   * @type {string}
   * @memberof UploadFolderRequestData
   */
  path: string;
}

/**
 * Check if a given object implements the UploadFolderRequestData interface.
 */
export function instanceOfUploadFolderRequestData(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "pathId" in value;
  isInstance = isInstance && "path" in value;

  return isInstance;
}

export function UploadFolderRequestDataFromJSON(
  json: any
): UploadFolderRequestData {
  return UploadFolderRequestDataFromJSONTyped(json, false);
}

export function UploadFolderRequestDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UploadFolderRequestData {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json["name"],
    pathId: json["pathId"],
    parent: !exists(json, "parent")
      ? undefined
      : EventLocalizationRequestImagesInnerFromJSON(json["parent"]),
    children: !exists(json, "children")
      ? undefined
      : (json["children"] as Array<any>).map(
          EventLocalizationRequestImagesInnerFromJSON
        ),
    files: !exists(json, "files")
      ? undefined
      : (json["files"] as Array<any>).map(
          EventLocalizationRequestImagesInnerFromJSON
        ),
    path: json["path"],
  };
}

export function UploadFolderRequestDataToJSON(
  value?: UploadFolderRequestData | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    pathId: value.pathId,
    parent: EventLocalizationRequestImagesInnerToJSON(value.parent),
    children:
      value.children === undefined
        ? undefined
        : (value.children as Array<any>).map(
            EventLocalizationRequestImagesInnerToJSON
          ),
    files:
      value.files === undefined
        ? undefined
        : (value.files as Array<any>).map(
            EventLocalizationRequestImagesInnerToJSON
          ),
    path: value.path,
  };
}
